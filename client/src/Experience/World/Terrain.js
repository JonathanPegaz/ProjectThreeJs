import * as THREE from 'three'
import Experience from '../Experience.js'
import * as CANNON from 'cannon-es'
import {ConvexGeometry} from "three/addons/geometries/ConvexGeometry.js";
import CannonUtils from "../Utils/CannonUtils.js";
import {bodyToMesh} from "../Utils/Utils.js";

export default class Terrain {
    constructor() {
        this.experience = new Experience()
        this.scene = this.experience.scene
        this.resources = this.experience.resources
        this.time = this.experience.time
        this.physics = this.experience.physics

        this.resource = this.resources.items.island_lowpoly

        this.object = new THREE.Object3D()
        this.object.add(new THREE.AxesHelper(50))
        this.object.position.set(0, 0, 0)

        this.setModel()
        this.setPhysics2()
    }


    setModel() {
        this.model = this.resource.scene
        this.model.traverse((child) => {
            if(child instanceof THREE.Mesh) {
                //child.material.wireframe = true
                child.castShadow = true
            }
        })
        this.model.children[0].position.set(0, 0, 0)
        this.model.children[0].geometry.center()
        console.log(this.model.children[0])

        this.object.add(this.model)
        this.scene.add(this.object)
    }

    setPhysics1() {
        // try physics with trimesh & convex polyhedron

        const shape = CannonUtils.createCannonConvex(this.model.children[0].geometry)

        const geometry = new THREE.BufferGeometry()
        const points = []
        for (let i = 0; i < shape.vertices.length; i += 1) {
            const v = shape.vertices[i]
            points.push(new THREE.Vector3(v.x, v.y, v.z))
        }
        geometry.setFromPoints(points)

        const indices = []
        for (let i = 0; i < shape.faces.length; i++) {
            const face = shape.faces[i]
            const a = face[0]
            for (let j = 1; j < face.length - 1; j++) {
                const b = face[j]
                const c = face[j + 1]
                indices.push(a, b, c)
            }
        }
        geometry.setIndex(indices)

        const mesh = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({
            color: 0x00ff00,
            wireframe: true,
        }))

        this.object.add(mesh)

        //const shape = CannonUtils.createTrimesh(convexHull.geometry)
        const body = new CANNON.Body({mass: 0})
        body.addShape(shape)
        this.physics.world.addBody(body)
    }

    setPhysics2() {
       /* // Récupérez le mesh correspondant au terrain
        const mesh = this.model.children[0]

        // Obtenez la matrice de modèle du terrain pour la transformation des coordonnées en y
        const matrix = mesh.matrix;

        // Récupérez les coordonnées en y de votre terrain
        const heights = mesh.geometry.attributes.position.array.filter((_, i) => i % 3 === 1);

        // Appliquez la matrice de modèle aux coordonnées en y pour les transformer en coordonnées du monde de Three.js
        const position = new THREE.Vector3();
        for (let i = 0; i < heights.length; i++) {
            position.set(0, heights[i], 0);
            position.applyMatrix4(matrix);
            heights[i] = position.y;
        }
        console.log(heights)

        const data = []
        for (let i = 0; i < 1000; i++) {
            const y = 0.5 * Math.cos(0.2 * i)
            data.push(y)
        }*/

        const terrain = this.model.children[0]

        /*// Create a matrix of height values
        const matrix = []
        const sizeX = 15
        const sizeZ = 15
        for (let i = 0; i < sizeX; i++) {
            matrix.push([])
            for (let j = 0; j < sizeZ; j++) {
                if (i === 0 || i === sizeX - 1 || j === 0 || j === sizeZ - 1) {
                    const height = 3
                    matrix[i].push(height)
                    continue
                }

                const height = Math.cos((i / sizeX) * Math.PI * 2) * Math.cos((j / sizeZ) * Math.PI * 2) + 2
                matrix[i].push(height)
            }
        }*/

        const matrix = [[0.5441818535327911,0.7330228795381987,0.8674583852291107,0.9453810376670748,0.6194369755685329,0.5052108972364109,0.41294557303190227,0.4037247374653817,0.42149474322795866,0.4321594960987568,0.4591807723045349,0.39977659732103343,0.535848493129015,0.6971835047006608,0.848149162530899,0.684564443138125,0.4743191480636596,0.37329656326493066,0.4373062759637833,0.436609772511974,0.3431955277919769],[0.4981412324612913,0.8536719744944388,1.0027885162687054,0.722900255640498,0.6887761646969571,0.5227863239829521,0.42028230502276537,0.22282197400327453,0.30404279359749387,0.5094733978604121,0.6647446231453734,0.6233673587323909,0.45190242330118957,0.35807271344239894,0.45567161617176255,0.6516563008178253,0.7011037645240098,0.9297235439004757,0.6558912997401081,0.4783570631451475,0.41552542496448003],[0.5370287373661995,0.7510786605721953,0.6754401374608278,0.5332314821542168,0.6519243024289607,0.8171034572758029,0.5163124851882458,0.24574346840381622,0.37118587344884874,0.7125760152935983,0.9181605577468873,0.9981528967618942,0.6271376833319663,0.34998357892036436,0.2552643299102783,0.5529917069683211,0.8389648944139481,1.0950541368349451,0.9241125285625457,0.6036237157858249,0.6096302334219217],[0.5229177896671924,0.6409587084148898,0.7453962613244508,0.5716138883937244,0.6650402700101754,0.816849272710924,0.5484760994359154,0.274418442826768,0.3947345797679012,0.6655398416847875,1.143794204827747,1.2111029014720394,0.8153318502207485,0.5666412493856803,0.20588104245062866,0.31307759699556803,0.5871187626089317,0.9059099954507385,0.880499976290945,0.5947805985048824,0.5000612216907583],[0.2838277876377106,0.5252967782697822,0.72479887008667,0.7882871411987266,0.9252152681350706,0.7308970921001898,0.5757008157670498,0.4535475879907607,0.5906637512147426,0.5919313691556454,0.9013086110353471,1.2084274470806122,1.0888524115085603,0.6121856182813645,0.08135319054126744,0.08159179092355939,0.37597386240959163,0.5725826601780676,0.4989192128181457,0.47946979085367325,0.5166198104619979],[0.2064899748530198,0.2782684812738599,0.5652419421746258,0.7157763409300759,1.021187359174752,0.8613877139601596,0.5398448006689371,0.5268998639727465,0.7380255689124946,0.6307818463657267,0.599431848178784,0.6617954002545868,0.8594860064393566,0.4590660105223248,0.14960657239126307,0.27648205500465384,0.5493394213301607,0.5628868238885929,0.3640908169503115,0.5063477180269674,0.7796574388579872],[0.3728312224149704,0.3054937044831197,0.6312358122318984,0.8793846503180314,1.0543951511383056,0.8228756440214261,0.5239646010100841,0.6344868130981922,0.7917233407497406,0.6869475761428474,0.5333411201834679,0.7337343029677869,0.6735754944384097,0.45077438279986387,0.2859528988599777,0.5056686748273314,0.9007876813411714,0.7771617354666825,0.5909761514514684,0.7562021326179155,1.034397453069687],[0.511257715895772,0.3557055306082338,0.6803778033703567,0.8749228987617947,0.8797736421227454,0.5906568073146513,0.4716193974018097,0.6645297333598137,0.9558654054999352,0.8549799710512163,0.7224569492042063,0.875967787206173,0.819129577279091,0.6918667627498508,0.6034161876887082,0.7431152496895911,0.8104953475296496,0.8048976510747918,0.6704406140372158,0.6836578341361123,0.9379390269517898],[0.3811391592025757,0.29907862844068234,0.5611794400960206,0.7791257457670644,0.6463070549070835,0.4005951343497798,0.5742078397423028,0.9699836447834969,1.206782019138336,0.7470227405428886,0.5150367364287377,0.5628418762236834,0.8594754874706269,1.092782647907734,0.9170307844877242,0.6563954197270987,0.44266728162765506,0.5265333152101176,0.6212881095707417,0.49841615579643783,0.30171425938606267],[0.3283584609627724,0.27490750774556183,0.6351576013490557,0.8125067518616148,0.7020987577736377,0.5210826108929012,0.8112823873758316,1.1239874452352523,0.9789811223745345,0.6072064321488142,0.35668830275535585,0.29738091975450515,0.5587542414665222,0.9017878532409668,1.0402436584234238,0.9219158673470705,0.5191754378378391,0.5808191250980556,0.9026337295770644,0.5976366308853162,0.30843934416770935],[0.38168773055076594,0.3465894984262655,0.6695177119225263,0.8786163056862345,0.7157922491431236,0.8039543905487132,1.2150771558284759,1.4283107340335846,0.808230385184288,0.45195437148213385,0.10068660974502563,0.028096288442611694,0.2973100125789642,0.678685761988163,1.2217052489519118,1.2662116204205875,0.8524297773838043,0.915827249791555,1.1180540442466735,0.7745690027116819,0.660335972905159],[0.4784387148916721,0.5556529111844144,0.6119766291230917,0.6362771758009756,0.5992839578539133,0.9491622415003234,1.1248154237866401,1.3413324475288393,0.9107234567403794,0.46998358815908436,0.1899411410093308,0.08959454894065855,0.23483332097530363,0.424383969604969,0.8761916115880013,1.2505918334114887,1.0253138333559035,1.1994208700673235,1.0374856114387512,0.7338238328854119,0.7048876434564589],[0.5180350124835968,0.8418827861058374,0.6965340822935105,0.4039542485306282,0.31644651889801023,0.6165438876665029,0.814074221253395,1.0953152611851693,1.041459858417511,0.7454203084111214,0.40230827331542973,0.427255243062973,0.529986795783043,0.6175453700125217,0.7254341274499893,0.917011919392597,0.7382607020437717,0.9003292283680427,0.9635838240385056,0.6136901862034988,0.5920427709817887],[0.5502204162999987,0.8460895623925352,0.7279490306973457,0.46983826665230066,0.21935588419437407,0.4022725653209002,0.6919419446960091,0.8564035505056381,0.7927611820399761,0.6703731745481492,0.45449348837137227,0.5994138717651367,0.7824291788041592,0.7712018020451068,0.6065720282495022,0.5395413198475779,0.5398796103894711,0.6444946267391944,0.7605117224156855,0.6031024293517321,0.4457784876227379],[0.5566415905952453,0.8749362854070567,0.8988740354776383,0.738984572105983,0.6220541525632143,0.6628132991656083,0.7363054528832434,0.8065222308039666,0.9725207030773162,0.6605135630816221,0.4453137248754501,0.5208108223974705,0.6035429950803519,0.6699345817789436,0.7290238872170448,0.5183091141475722,0.4025195568799973,0.571856244907356,0.6160056032240391,0.46671585782740643,0.23548296093940735],[0.5001818156107735,0.6376506401443514,0.8434394694286771,0.8992111545845088,0.877673542656919,0.8990022789296409,0.7921886057885247,0.6454563671272376,0.854895051709384,0.6176311408600516,0.44122852258420775,0.4417338736627376,0.5093174398928106,0.6555481039911233,0.8499063139016695,0.6340192185429121,0.5900685643238638,0.5401614651809908,0.6085664257470356,0.48341578648783834,0.1893047005752081],[0.4611016273498535,0.5524681436001835,0.6689493112266063,0.6757408632100684,0.8279837667942047,0.8585544128345199,0.5749086912721396,0.5317913435399533,0.7210702858865261,0.6285401433706284,0.43733964711427686,0.5713798245415092,0.7723478645086287,0.7940335847437382,0.9305651277303696,0.8958648673439707,0.5542133346199989,0.6348128935170779,0.8520302444696427,0.7018965433397999,0.39785803258419045],[0.4810970033831144,0.48487563656556065,0.5473256429400961,0.6625164399240671,0.8200870245043234,0.6290644157138273,0.5522997323348456,0.4334661844972275,0.5898813670478993,0.5348618192888531,0.5111386249093793,0.8023523072746093,1.047709862404028,1.0257505694437374,1.0609063863858226,0.9550440616350399,0.5368105099373446,0.5937062782478912,0.8488716499870628,0.788739914127957,0.48150275937892123],[0.6795247048139573,0.6925384809802172,0.7513792887330055,1.0955185818933943,0.9067169874906539,0.799439641366048,0.7653789818286896,0.4805793780833483,0.34651559591293335,0.5067559365183115,0.5521499775350094,0.7377515591681004,0.9918588995933533,1.0365755379199981,1.209446406364441,0.9363814247251532,0.5526915945112706,0.424282690259433,0.5355366613715887,0.6198150603958718,0.595560047775507],[0.8127789296196728,0.5733002177191754,0.5492639085699443,0.9088728002003436,0.9448882097358858,0.7473603732627202,0.7122810355669681,0.4987875471424118,0.49193676705878525,0.716635260473936,0.8048886155379914,0.6347343720865004,0.6766935918513095,0.8378830381936156,1.1879312282684087,0.892023437387223,0.5733707903818533,0.3884275429347048,0.5015538996945164,0.6021215495858914,0.8090492092889174],[0.7243241518735886,0.44178664475211954,0.3424058854579925,0.4604438780413942,0.5129728958010674,0.4939143242064383,0.5074666060507297,0.6045017428696156,0.6902491211891175,0.8479189381003379,0.8828575611114502,0.535521931014955,0.5290771134197712,0.7755876012146473,0.9882907897233963,0.8069104814218275,0.5958765707910061,0.5619354375143183,0.8487987905740738,0.8506900132219493,0.9511522650718689]]

        console.log(matrix)

        // Create the heightfield
        const heightfieldShape = new CANNON.Heightfield(matrix, {
            elementSize: 1,
        })


        // Créez un corps physique pour le terrain et ajoutez le `Heightfield`
        const terrainBody = new CANNON.Body({
            mass: 0, // Le terrain est statique, donc sa masse est de 0
            shape: heightfieldShape,
        });

        // Ajoutez le corps physique du terrain à votre monde Cannon.js
        this.physics.world.addBody(terrainBody)

        const mesh = bodyToMesh(terrainBody, new THREE.MeshLambertMaterial({
            color: 0xdddddd
        }))
        mesh.rotation.x = -Math.PI / 2
        console.log(mesh)
        // enable shadows on every object
        mesh.traverse((child) => {
        })

        this.scene.add(mesh)
    }

}